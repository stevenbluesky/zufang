package com.isurpass.service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import javax.annotation.Resource;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.ant.business.Device;
import com.ant.business.DoorlockPasswordRule;
import com.ant.business.DoorlockPasswordRuleDtl;
import com.ant.business.LockPassword;
import com.ant.config.MjConfig;
import com.ant.restful.service.RestfulUtil;
import com.ant.util.AES;
import com.ant.util.ConstDefine;
import com.ant.util.StringUtil;
import com.ant.vo.LockPasswordVo;
import com.isurpass.common.exception.BusinessException;
import com.ant.util.Utils;

public class AutoGenerationPasswordService {

	private HiPasswordRuleService passwordRuleService;
	private HiDeviceService HiDeviceService;
	private HiLockPasswordService HiLockPasswordService;
	private HiPasswordRuleDtlService passwordRuleDtlService;
	@Resource
	public void setPasswordRuleService(HiPasswordRuleService passwordRuleService) {
		this.passwordRuleService = passwordRuleService;
	}
	@Resource
	public void setHiDeviceService(HiDeviceService hiDeviceService) {
		HiDeviceService = hiDeviceService;
	}
	@Resource
	public void setHiLockPasswordService(HiLockPasswordService hiLockPasswordService) {
		HiLockPasswordService = hiLockPasswordService;
	}
	@Resource
	public void setPasswordRuleDtlService(HiPasswordRuleDtlService passwordRuleDtlService) {
		this.passwordRuleDtlService = passwordRuleDtlService;
	}

	private static Log log = LogFactory.getLog(AutoGenerationPasswordService.class);
	
	public void autoGenerationPassword(){
		log.info("start to Automatic password creation");
		List<DoorlockPasswordRule> alluserule = passwordRuleService.findAllUseRule();
		if(alluserule==null)
			return;
		for(DoorlockPasswordRule rule : alluserule){//分小区进行操作
			List<Device> districtlock = HiDeviceService.findByDistrictIdAndType(rule.getDistrictid(),0);//查找小区下的门锁
			List<DoorlockPasswordRuleDtl> dtllist = passwordRuleDtlService.findByDoorlockPasswordRuleId(rule.getDoorlockpasswordruleid());
			if(districtlock!=null&&dtllist!=null){
				for(Device lock : districtlock){//分门锁进行操作
					try {
						generationPasswordByLock(lock,dtllist);//小区下有规则没门锁会导致走不下去？
					} catch (Exception e) {
						log.error("Automatic password creation failed", e);
					}
				}
			}
		}
	}
	
	public void autoGenerationPasswordByLock(long deviceid){
		Device device = HiDeviceService.findByDeviceId(deviceid);
		DoorlockPasswordRule rule = passwordRuleService.findByDistrictId(device.getDistrictId());
		if(rule==null)
			return;
		List<DoorlockPasswordRuleDtl> dtllist = passwordRuleDtlService.findByDoorlockPasswordRuleId(rule.getDoorlockpasswordruleid());
		if(dtllist==null)
			return;
		try {
			generationPasswordByLock(device,dtllist);
		} catch (Exception e) {
			log.error("Automatic password creation by lock failed", e);
		}
	}
	public void autoGenerationPasswordByDistrict(long districtid){
		DoorlockPasswordRule rule = passwordRuleService.findByDistrictId(districtid);
		List<Device> districtlock = HiDeviceService.findByDistrictIdAndType(districtid,0);//查找小区下的门锁
		if(rule==null)
			return;
		List<DoorlockPasswordRuleDtl> dtllist = passwordRuleDtlService.findByDoorlockPasswordRuleId(rule.getDoorlockpasswordruleid());
		if(dtllist==null)
			return;
		for(Device lock : districtlock){//分门锁进行操作
			try {
				generationPasswordByLock(lock,dtllist);
			} catch (Exception e) {
				log.error("Automatic password creation by district failed", e);
			}
		}
	}
	private void generationPasswordByLock(Device lock,List<DoorlockPasswordRuleDtl> dtllist){
		Set<Integer> usercodeset = new HashSet<Integer>();//可用usercode缓存
		List<LockPassword> usedpasswordlist = new ArrayList<LockPassword>();//过期密码缓存
		Set<Integer> cannotusecodelist = new HashSet<Integer>();//不可用usercode
		Date date = new Date();
		
		//获取可用usecode集合
		for(int i=11;i<211;i++){
			usercodeset.add(i);
		}
		int[] status = new int[] { ConstDefine.LOCKPASSWORD_STATUS_NORMAL, ConstDefine.LOCKPASSWORD_STATUS_SENDING,
				ConstDefine.LOCKPASSWORD_STATUS_SENDINGTIME,ConstDefine.LOCKPASSWORD_STATUS_SENDTIMEFAILED,
				ConstDefine.LOCKPASSWORD_STATUS_DELETEFAILED,ConstDefine.LOCKPASSWORD_STATUS_DELETING};
		int[] usedstatus = new int[]{0,1,9};
		List<LockPassword> lockpasswordlist = HiLockPasswordService.findUsedPasswordByDvcid(lock.getId(),status,usedstatus);
		if(lockpasswordlist!=null){
			for(LockPassword pas : lockpasswordlist){
				if(usercodeset.contains(pas.getUsercode())){
					usercodeset.remove(pas.getUsercode());
					cannotusecodelist.add(pas.getUsercode());
				}
			}
		}
		
		//获取过期密码缓存
		List<LockPassword> overduelockpasswordlist = HiLockPasswordService.findOverduePasswordByDvcid(lock.getId(),new int[]{0,4},new int[]{0,1},new int[]{1,2});
		if(overduelockpasswordlist!=null){
			for(LockPassword l : overduelockpasswordlist){
				if(!cannotusecodelist.contains(l.getUsercode())){
					usedpasswordlist.add(l);
				}
			}
		}
		//能下发今天至后七天的密码
		for(int i=0;i<7;i++){
			for(DoorlockPasswordRuleDtl dtl : dtllist){//遍历密码规则
				Calendar calendar = Calendar.getInstance();
		        calendar.setTime(new Date());
		        calendar.add(Calendar.DAY_OF_MONTH, i);
		        calendar.set(Calendar.HOUR_OF_DAY, 0);
		        calendar.set(Calendar.MINUTE, 0);
		        calendar.set(Calendar.SECOND, 0);
		        calendar.set(Calendar.MILLISECOND, 0);
				int duration = dtl.getDuration();
				int durationhour = duration/60;
				int durationmin = duration%60;
				String starttime = dtl.getStarttime();
				
				int weekday = calendar.get(Calendar.DAY_OF_WEEK);//周日为1 周六为7
				List<Integer> weeklist = getWeeklist(dtl.getWeekday());
				if(!weeklist.contains(weekday)){
					break;
				}
				int starthour = Integer.parseInt(starttime.split(":")[0]);
				int startmin = Integer.parseInt(starttime.split(":")[1]);
				calendar.add(Calendar.HOUR_OF_DAY, starthour);
				calendar.add(Calendar.MINUTE, startmin);
				Date validfrom = calendar.getTime();
				calendar.add(Calendar.HOUR_OF_DAY, durationhour);
				calendar.add(Calendar.MINUTE, durationmin);
				Date validthrough = calendar.getTime();
				if(validthrough.getTime()>=date.getTime()&&!checkvalidtime(lock,validfrom,validthrough)){
					//有效期结束时间早于当前时间or该有效期内已经存在一条密码 该时间段已经被预订    直接下一条规则
					if(usedpasswordlist.size()>0){
						//过期密码缓存不为空
						LockPassword lockPassword = usedpasswordlist.get(0);
						usedpasswordlist.remove(lockPassword);
						if(lockPassword.getUsestatus()==1){
							lockPassword.setStatus(9);
							lockPassword.setSynstatus(1);
							HiLockPasswordService.update(lockPassword);
							LockPasswordVo lockPasswordVo = new LockPasswordVo();
							lockPasswordVo.setUsercode(lockPassword.getUsercode());
							lockPasswordVo.setValidfrom(validfrom);
							lockPasswordVo.setValidthrough(validthrough);
							createNewPassword(lockPasswordVo,lock);
						}else{
							lockPassword.setStatus(2);
							lockPassword.setSynstatus(2);
							lockPassword.setValidfrom(validfrom);
							lockPassword.setValidthrough(validthrough);
							//异步下发密码有效期
							updateLockUserValidTimeAsynchronous(lockPassword);
							HiLockPasswordService.update(lockPassword);
						}
					}else{
						//过期密码缓存为空
						LockPasswordVo lockPasswordVo = new LockPasswordVo();
						if(usercodeset.size()>0){//可用usercode缓存不为空
							//取一个usercode生成新密码
							for(Iterator<Integer> it = usercodeset.iterator();it.hasNext();){
								lockPasswordVo.setUsercode(it.next());
								it.remove();
								break;
							}
							lockPasswordVo.setValidfrom(validfrom);
							lockPasswordVo.setValidthrough(validthrough);
							createNewPassword(lockPasswordVo,lock);
						}
					}
				}
			}
		}
	}

	private void updateLockUserValidTimeAsynchronous(LockPassword lockPassword) {
		Device device = HiDeviceService.findById((long)lockPassword.getDvcid());
		Map<String , Object> map = new HashMap<String , Object>();
		map.put("zwavedeviceid", device.getPtDeviceId());
		map.put("tid", lockPassword.getThirdsendid());
		map.put("validfrom", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(lockPassword.getValidfrom()));
		map.put("validthrough", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(lockPassword.getValidthrough()));
		
		String str = RestfulUtil.postToServerHttps(MjConfig.get("restUrl") + "thirdpart/zufang/updatelockuservalidtimeasynchronous", map);
		Utils.checkResult(str);
	}

	private void createNewPassword(LockPasswordVo lockPasswordVo, Device lock) {
		List<String> passwordlist = HiLockPasswordService.findUserdPasswordByDvcid(lock.getId().intValue());
		lockPasswordVo.setDvcid(lock.getId().intValue());
		String temp = createunrepeatpassword();
		while(passwordlist!=null&&passwordlist.contains(AES.encrypt2Str(temp))){
			temp = createunrepeatpassword();
		}
		lockPasswordVo.setPassword(temp);
		String tid = StringUtil.getUUID();
		lockPasswordVo.setThirdsendid(tid);
		//调用下发接口
		sendpassword(lockPasswordVo,lock);
		
		LockPassword lp = new LockPassword();
		lp.setDvcid(lockPasswordVo.getDvcid());
		lp.setUsertype(21);
		lp.setUsercode(lockPasswordVo.getUsercode());
		lp.setUsername("Auto");
		lp.setPhonenumber("");
		lp.setValidfrom(lockPasswordVo.getValidfrom());
		lp.setValidthrough(lockPasswordVo.getValidthrough());
		lp.setCreatetime(new Date());
		lp.setStatus(1);
		lp.setUsestatus(0);
		lp.setSynstatus(0);
		lp.setPasswordtype(1);
		lp.setPassword(AES.encrypt2Str(lockPasswordVo.getPassword()));
		lp.setThirdsendid(lockPasswordVo.getThirdsendid());
		
		HiLockPasswordService.save(lp);
	}

	private String createunrepeatpassword(){
		Random ra = new Random();
		Random r = new Random(System.currentTimeMillis()+ra.nextInt(100));
		return String.format("%06d", r.nextInt(1000000));
	}
	
	private List<Integer> getWeeklist(int weekday) {
		List<Integer> weeklist = new ArrayList<Integer>();
		if(((weekday)%(Math.pow(2, 6)))/(Math.pow(2, 5)) >= 1.0){
			weeklist.add(2);
		}
		if(((weekday)%(Math.pow(2, 5)))/(Math.pow(2, 4)) >= 1.0){
			weeklist.add(3);
		}
		if(((weekday)%(Math.pow(2, 4)))/(Math.pow(2, 3)) >= 1.0){
			weeklist.add(4);
		}
		if(((weekday)%(Math.pow(2, 3)))/(Math.pow(2, 2)) >= 1.0){
			weeklist.add(5);
		}
		if(((weekday)%(Math.pow(2, 2)))/(Math.pow(2, 1)) >= 1.0){
			weeklist.add(6);
		}
		if(((weekday)%(Math.pow(2, 1)))/(Math.pow(2, 0)) >= 1.0){
			weeklist.add(7);
		}
		if(((weekday)%(Math.pow(2, 7)))/(Math.pow(2, 6)) >= 1.0){
			weeklist.add(1);
		}
		return weeklist;
	}

	private boolean checkvalidtime(Device lock ,Date validfrom ,Date validthrough){//该有效期内已经存在一条有效密码
		List<LockPassword> passwordlist = HiLockPasswordService.findValidPasswordByDvcid(lock.getId(), new int[]{0,1}, new int[]{0,1});
		if(passwordlist==null)
			return false;
		for(LockPassword dp : passwordlist){
			if(dp.getValidfrom().getTime()<=validfrom.getTime()&&dp.getValidthrough().getTime()>=validthrough.getTime()&&dp.getStatus()<2){//已被预订
				return true;
			}
		}
		return false;
	}
	
	private void sendpassword(LockPasswordVo lockpassword,Device device){
		Map<String , Object> map = new HashMap<String , Object>();
		map.put("zwavedeviceid", device.getPtDeviceId());
		map.put("password", lockpassword.getPassword());
		map.put("usercode", lockpassword.getUsercode());
		map.put("asynch", 0);
		map.put("tid", lockpassword.getThirdsendid());
		if(lockpassword.getValidfrom() == null){
			Calendar c = Calendar.getInstance();
			c.set(Calendar.HOUR_OF_DAY, 0);
			c.set(Calendar.MINUTE, 0);
			c.set(Calendar.SECOND, 0);
			lockpassword.setValidfrom(c.getTime());
		}
		if(lockpassword.getValidthrough() == null){
			Calendar c = Calendar.getInstance();
			c.set(Calendar.HOUR_OF_DAY, 23);
			c.set(Calendar.MINUTE, 59);
			c.set(Calendar.SECOND, 59);
			lockpassword.setValidthrough(c.getTime());
		}
		map.put("validfrom", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(lockpassword.getValidfrom()));
		map.put("validthrough", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(lockpassword.getValidthrough()));
		
		String str = "" ;
		if ( lockpassword.getUsercode() != ConstDefine.LOCKPASSWORD_USERCODE_TEMP )
			str = RestfulUtil.postToServerHttps(MjConfig.get("restUrl") + "thirdpart/zufang/setlockuserpassword", map);//下发用户密码
		Utils.checkResult(str);
		try {
			JSONObject json = JSON.parseObject(str);
			if ( json.containsKey("usercode"))
				lockpassword.setUsercode(json.getIntValue("usercode"));
			if(json.getIntValue("resultCode")==30580)
				lockpassword.setStatus(ConstDefine.LOCKPASSWORD_STATUS_SENDTIMEFAILED);
		} catch (Exception e) {
			throw new BusinessException("系统错误");
		}
	}
}
